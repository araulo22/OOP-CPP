        -:    0:Source:C:/Users/araul/CLionProjects/a45-araulo22/Repository.cpp
        -:    0:Graph:C:\Users\araul\CLionProjects\a45-araulo22\cmake-build-debug-coverage\CMakeFiles\a45_araulo22.dir\Repository.cpp.gcno
        -:    0:Data:C:\Users\araul\CLionProjects\a45-araulo22\cmake-build-debug-coverage\CMakeFiles\a45_araulo22.dir\Repository.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by araul on 28.03.2021.
        -:    3://
        -:    4:
        -:    5:#include "Repository.h"
        -:    6:#include <iostream>
        -:    7:#include <fstream>
        -:    8:
        -:    9://Repository constructor
       32:   10:Repository::Repository()
       32:   10-block  0
        -:   11:{
       32:   12:    std::vector<Movie>{};
       32:   13:}
        -:   14:
        -:   15://Add given movie to list
      240:   16:int Repository::addMovie(const Movie& movieToAdd)
        -:   17:{
      240:   18:    auto movie = std::find(movieList.begin(), movieList.end(), movieToAdd);
      240:   18-block  0
      240:   19:    if (movie != movieList.end() && !movieList.empty())
      240:   19-block  0
        2:   19-block  1
        2:   19-block  2
      238:   19-block  3
      240:   19-block  4
        2:   20:        return -1;
        2:   20-block  0
      238:   21:    movieList.push_back(movieToAdd);
      238:   21-block  0
      238:   22:    return 1;
      238:   22-block  0
        -:   23:}
        -:   24:
        -:   25://Delete a movie from the movieList
        4:   26:int Repository::deleteMovie(const Movie& movieToDelete)
        -:   27:{
        4:   28:    auto movie = std::find(movieList.begin(), movieList.end(), movieToDelete);
        4:   28-block  0
        4:   29:    if (movie == movieList.end())
        4:   29-block  0
        2:   30:        return -1;
        2:   30-block  0
        2:   31:    movieList.erase(movie);
        2:   31-block  0
    $$$$$:   31-block  1
        2:   32:    return 1;
        2:   32-block  0
        -:   33:}
        -:   34:
        -:   35://Update a movie from the movieList
        4:   36:int Repository::updateMovie(const Movie& movieToUpdateWith)
        -:   37:{
        4:   38:    auto movie = std::find(movieList.begin(), movieList.end(), movieToUpdateWith);
        4:   38-block  0
        4:   39:    if (movie == movieList.end())
        4:   39-block  0
        2:   40:        return -1;
        2:   40-block  0
        2:   41:    *movie = movieToUpdateWith;
        2:   41-block  0
        2:   42:    return 1;
        2:   42-block  0
        -:   43:}
        -:   44:
        -:   45://Get all the movies with a given genre
        7:   46:std::vector<Movie> Repository::getMoviesByGenre(const std::string& genreGiven)
        -:   47:{
       14:   48:    std::vector<Movie> moviesWithGenre;
        7:   48-block  0
        7:   48-block  1
    $$$$$:   48-block  2
        7:   49:    if (genreGiven.empty())
        1:   50:        return movieList;
        1:   50-block  0
        1:   50-block  1
        6:   51:    std::copy_if(movieList.begin(), movieList.end(), std::back_inserter(moviesWithGenre), [&genreGiven](const Movie& movie) {return movie.getGenre() == genreGiven; });
        6:   51-block  0
        6:   51-block  1
        6:   52:    return moviesWithGenre;
        6:   52-block  0
        -:   53:}
        -:   54:
        -:   55://Get all the movies
       16:   56:std::vector<Movie> Repository::getAllMovies()
        -:   57:{
       16:   58:    return movieList;
       16:   58-block  0
        -:   59:}
        -:   60:
        -:   61://Get all the movies in the watch list
        1:   62:std::vector<Movie> Repository::getAllWatchListMovies()
        -:   63:{
        1:   64:    return userWatchList;
        1:   64-block  0
        -:   65:}
        -:   66:
        -:   67://Add a certain movie to the watch list
        4:   68:int Repository::addMovieToWatchlist(const Movie& movieToAdd)
        -:   69:{
        4:   70:    auto movie = std::find(userWatchList.begin(), userWatchList.end(), movieToAdd);
        4:   70-block  0
        4:   71:    if (movie != userWatchList.end())
        4:   71-block  0
        1:   72:        return -1;
        1:   72-block  0
        3:   73:    userWatchList.push_back(movieToAdd);
        3:   73-block  0
        3:   74:    return 1;
        3:   74-block  0
        -:   75:}
        -:   76:
        -:   77://Add a certain movie to the watch list by the title
        4:   78:int Repository::addMovieToWatchListByTitle(const std::string& titleOfTheMovieToAdd)
        -:   79:{
        4:   80:    auto movie = std::find_if(movieList.begin(), movieList.end(), [&titleOfTheMovieToAdd](const Movie& tempMovie) {return tempMovie.getTitle() == titleOfTheMovieToAdd;});
        4:   80-block  0
        4:   81:    if (movie == movieList.end())
        4:   81-block  0
        1:   82:        return -1;
        1:   82-block  0
        3:   83:    userWatchList.push_back(*movie);
        3:   83-block  0
        3:   84:    return 1;
        3:   84-block  0
        -:   85:}
        -:   86:
        -:   87://Get the number of movies in the watch list
        1:   88:int Repository::getNumberOfMoviesWatchList()
        -:   89:{
        1:   90:    return userWatchList.size();
        1:   90-block  0
        -:   91:}
        -:   92:
        -:   93://Delete movie from user watch list and add a like if user liked it
        1:   94:int Repository::deleteMovieFromWatchList(const std::string &title, bool liked)
        -:   95:{
        1:   96:    auto movie = std::find_if(userWatchList.begin(), userWatchList.end(), [&title](const Movie& tempMovie) {return tempMovie.getTitle() == title;});
        1:   96-block  0
        1:   97:    if(movie == userWatchList.end())
        1:   97-block  0
    #####:   98:        return -1;
    %%%%%:   98-block  0
        1:   99:    if(liked)
        1:   99-block  0
        1:  100:        addLike(title);
        1:  100-block  0
        1:  101:    userWatchList.erase(movie);
        1:  101-block  0
    $$$$$:  101-block  1
        1:  102:    return 1;
        1:  102-block  0
        -:  103:}
        -:  104:
        1:  105:void Repository::addLike(const std::string &title) {
        1:  106:    auto movie = std::find_if(movieList.begin(), movieList.end(), [&title](const Movie& tempMovie) {return tempMovie.getTitle() == title;});
        1:  106-block  0
        1:  107:    movie->setLikes(movie->getLikes() + 1);
        1:  107-block  0
        1:  107-block  1
        1:  108:}
        1:  108-block  0
        -:  109:
        1:  110:int Repository::getNumberOfMovies() {
        1:  111:    return movieList.size();
        1:  111-block  0
        -:  112:}
        -:  113:
        2:  114:Movie Repository::getMovieAtPosition(int positionOfMovie) {
        2:  115:    if (positionOfMovie < 0 || positionOfMovie >= movieList.size())
        2:  115-block  0
        1:  115-block  1
        1:  115-block  2
        1:  115-block  3
        2:  115-block  4
        1:  116:        throw std::runtime_error("Invalid position");
        1:  116-block  0
        1:  116-block  1
    $$$$$:  116-block  2
        1:  117:    return movieList[positionOfMovie];
        1:  117-block  0
        -:  118:}
